@function round-to-step($number, $step) {
	// Always round up

	@return ceil($number / $step) * $step;
}

@function get-closest-line-height($fontSize, $lineHeight, $baseline) {
	$roundedLineHeight: round-to-step($fontSize * $lineHeight, $baseline);

	@return $roundedLineHeight;
}

// $scale1 = small
// $scale2 = medium
// $scale3 = large
// $scale4 = xlarge
// $scale5 = xxlarge
// $scale6 = xxxlarge
// $scale1: 1.2;
// $scale2: 1.25;
// $scale3: 1.25;
// $scale4: 1.25;
// $scale5: 1.25;
// $scale6: 1.25;
// $ms-ratio: 1.25;
// $base1: 15px;
// $base2: 16px;
// $base3: 16px;
// $base4: 16px;
// $base5: 16px;
// $base6: 16px;
$scale1: 1.15;
$scale2: 1.2;
$scale3: 1.2;
$scale4: 1.2;
$scale5: 1.2;
$scale6: 1.2;
$ms-ratio: 1.2;   // 1.185185 - this gives 14px at 14px.  maybe just set base to 14px?  search for 14px and replace
$base1: 16px;
$base2: 16px;
$base3: 16px;
$base4: 16px;
$base5: 16px;
$base6: 16px;

$bestFitLineHeight: false;

@mixin new-typesetter($modPosition, $lh: $line-height-base) {
	font-size: ms($modPosition, $base1, $scale1);

	@if $bestFitLineHeight == true {
		line-height: get-closest-line-height(ms($modPosition, $base1, $scale1), clear-units($lh), 12);
	}
	@else {
		line-height: $lh;
	}

	@media only screen and (min-width: 601px) {
		font-size: ms($modPosition, $base2, $scale2);

		@if $bestFitLineHeight == true {
			line-height: get-closest-line-height(ms($modPosition, $base2, $scale2), clear-units($lh), 12);
		}
	}

	@media only screen and (min-width: 901px) {
		font-size: ms($modPosition, $base3, $scale3);

		@if $bestFitLineHeight == true {
			line-height: get-closest-line-height(ms($modPosition, $base3, $scale3), clear-units($lh), 12);
		}
	}

	@media only screen and (min-width: 1201px) {
		font-size: ms($modPosition, $base4, $scale4);

		@if $bestFitLineHeight == true {
			line-height: get-closest-line-height(ms($modPosition, $base4, $scale4), clear-units($lh), 12);
		}
	}

	@media only screen and (min-width: 1501px) {
		font-size: ms($modPosition, $base5, $scale5);

		@if $bestFitLineHeight == true {
			line-height: get-closest-line-height(ms($modPosition, $base5, $scale5), clear-units($lh), 12);
		}
	}

	@media only screen and (min-width: 1801px) {
		font-size: ms($modPosition, $base6, $scale6);

		@if $bestFitLineHeight == true {
			line-height: get-closest-line-height(ms($modPosition, $base6, $scale6), clear-units($lh), 12);
		}
	}
}

@mixin header-common {
	max-width: 640px; // calculated px value from p max-width
	max-width: 15em;
	font-family: $headings-font-family;
	font-weight: $headings-font-weight;
	color: $headings-color;
	// text-transform: uppercase;
	letter-spacing: -0.03em;

	.u--text-center & {
		margin-right: auto;
		margin-left: auto;
		width: 100%; // Fixes IE11 issue
	}
}

@mixin type--h1 {
	@include header-common;
	@include new-typesetter(6, 1.1em); // 1.2em
}

@mixin type--h2 {
	@include header-common;
	@include new-typesetter(5, 1.1em); // 1.1em
}

@mixin type--h3 {
	@include header-common;
	@include new-typesetter(4, 1.1em); // 1.2em
}

@mixin type--h4 {
	@include header-common;
	@include new-typesetter(3, 1.1em); // 1.2em
}

@mixin type--h5 {
	@include header-common;
	@include new-typesetter(2, 1.1em); // 1.3em
}

@mixin type--h6 {
	@include header-common;
	@include new-typesetter(1, 1.1em); // 1.3em
}

@mixin type--p {
	@include new-typesetter(0);
}

@mixin type--small {
	@include new-typesetter(-1);
}

@mixin type--tiny {
	@include new-typesetter(-2);

	text-transform: uppercase;
}
